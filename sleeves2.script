var sleevesNum = args[0]
var arr = []
var arr_size = 0

function merge(arr, l, m, r)
{
	var n1 = m - l + 1;
	var n2 = r - m;

	// Create temp arrays
	var L = new Array(n1);
	var R = new Array(n2);

	// Copy data to temp arrays L[] and R[]
	for (var i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (var j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];

	// Merge the temp arrays back into arr[l..r]

	// Initial index of first subarray
	var i = 0;

	// Initial index of second subarray
	var j = 0;

	// Initial index of merged subarray
	var k = l;

	while (i < n1 && j < n2) {
		if (L[i].cost <= R[j].cost) {
			arr[k] = L[i];
			i++;
		}
		else {
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	// Copy the remaining elements of
	// L[], if there are any
	while (i < n1) {
		arr[k] = L[i];
		i++;
		k++;
	}

	// Copy the remaining elements of
	// R[], if there are any
	while (j < n2) {
		arr[k] = R[j];
		j++;
		k++;
	}
}

// l is for left index and r is
// right index of the sub-array
// of arr to be sorted */
function mergeSort(arr,l, r){
	if(l>=r){
		return;//returns recursively
	}
	var m =l+ parseInt((r-l)/2);
	mergeSort(arr,l,m);
	mergeSort(arr,m+1,r);
	merge(arr,l,m,r);
}

while(true){
	var newArr = sleeve.getSleevePurchasableAugs(sleevesNum)
	var newLength = newArr.length
	if(newLength > 0 && newLength != arr_size){
		arr = sleeve.getSleevePurchasableAugs(sleevesNum)
		arr_size = arr.length
		tprint("Merge sorting augmentations for sleeve " + sleevesNum);
		mergeSort(arr, 0, arr_size - 1)
		var boughtAugs = sleeve.getSleeveAugmentations(sleevesNum)
		for(var x = 0; x < arr_size; x++){
			var currAug = arr[x]
			if(!boughtAugs.includes(currAug.name)){
				tprint("Buying Augmentation, " + currAug.name + " for sleeve " + sleevesNum)
				while(!sleeve.purchaseSleeveAug(sleevesNum, currAug.name)){
					sleep(10)
				}
			}
		}
	}
}